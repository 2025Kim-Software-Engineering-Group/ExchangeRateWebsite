{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mini-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect, createContext, useContext } from 'react';\n// import './styles.css';\n\n// // 创建 Currency Context\n// const CurrencyContext = createContext();\n\n// function Header() {\n//   return <header><h1>ExchangeRate</h1></header>;\n// }\n\n// // 货币选择组件\n// function CurrencySelect({ value, onChange, currencies }) {\n//   return (\n//     <select \n//       className='CurrencySelect' \n//       value={value} \n//       onChange={onChange}\n//     >\n//       {currencies.map((currency) => (\n//         <option key={currency} value={currency}>\n//           {currency}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n\n// // 输入组件\n// function UserInput({ value, onChange, readOnly = false, type = \"text\" }) {\n//   return (\n//     <label>\n//       <input \n//         className='CurrencyName'\n//         value={value}\n//         onChange={onChange}\n//         readOnly={readOnly}\n//         type={type}\n//       />\n//     </label>\n//   );\n// }\n\n// // 交换按钮组件\n// function ExchangeButton({ onClick }) {\n//   return (\n//     <button className='ExchangeButton' onClick={onClick}>\n//       <img src=\"https://gd-hbimg.huaban.com/936d8460afb48f0c0737186352ba325e0a7f7dc4641e-oRIMdv_fw658\" alt=\"exchange\"/>\n//     </button>\n//   );\n// }\n\n// // 加载指示器组件\n// function LoadingSpinner() {\n//   return <div className=\"loading-spinner\"></div>;\n// }\n\n// // 错误消息组件\n// function ErrorMessage({ message }) {\n//   return <div className=\"error-message\">{message}</div>;\n// }\n\n// function Converter() {\n//   const { selectedCurrency, setSelectedCurrency } = useContext(CurrencyContext);\n//   const [fromCurrency, setFromCurrency] = useState(selectedCurrency);\n//   const [toCurrency, setToCurrency] = useState(\"EUR\");\n//   const [amount, setAmount] = useState(\"1\");\n//   const [result, setResult] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [lastUpdate, setLastUpdate] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n//   const [currencies, setCurrencies] = useState([]);\n//   const [historicalRate, setHistoricalRate] = useState(null);\n\n//   // 当fromCurrency改变时更新Context\n//   useEffect(() => {\n//     setSelectedCurrency(fromCurrency);\n//   }, [fromCurrency, setSelectedCurrency]);\n\n//   // 获取可用货币列表\n//   useEffect(() => {\n//     const fetchCurrencies = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`\n//         );\n//         const data = await response.json();\n//         if (data.result === \"success\") {\n//           setCurrencies(Object.keys(data.conversion_rates));\n//         }\n//       } catch (error) {\n//         setError(\"Failed to load currencies\");\n//       }\n//     };\n//     fetchCurrencies();\n//   }, []);\n\n//   // 获取当前汇率\n//   const fetchExchangeRate = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`\n//       );\n//       const data = await response.json();\n\n//       if (data.result === \"success\") {\n//         const rate = data.conversion_rates[toCurrency];\n//         const calculatedResult = (parseFloat(amount) * rate).toFixed(2);\n//         setResult(calculatedResult);\n\n//         const updateDate = new Date(data.time_last_update_unix * 1000);\n//         setLastUpdate(updateDate.toLocaleDateString());\n//       } else {\n//         setError(\"Failed to get exchange rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching exchange rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 获取历史汇率\n//   const fetchHistoricalRate = async (selectedDate) => {\n//     if (!selectedDate) return;\n\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${fromCurrency}/${formattedDate}`\n//       );\n//       const data = await response.json();\n\n//       if (data.result === \"success\") {\n//         const historicalRate = data.conversion_rates[toCurrency];\n//         setHistoricalRate(historicalRate);\n//       } else {\n//         setError(\"Failed to get historical rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching historical rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 当输入值改变时自动获取新的汇率\n//   useEffect(() => {\n//     if (amount && fromCurrency && toCurrency) {\n//       fetchExchangeRate();\n//     }\n//   }, [amount, fromCurrency, toCurrency]);\n\n//   // 处理金额输入变化\n//   const handleAmountChange = (e) => {\n//     const value = e.target.value;\n//     if (/^\\d*\\.?\\d*$/.test(value)) {\n//       setAmount(value);\n//     }\n//   };\n\n//   // 处理日期输入变化\n//   const handleDateChange = (e) => {\n//     const selectedDate = e.target.value;\n//     setDate(selectedDate);\n//     fetchHistoricalRate(selectedDate);\n//   };\n\n//   // 交换货币\n//   const handleExchange = () => {\n//     setFromCurrency(toCurrency);\n//     setToCurrency(fromCurrency);\n//   };\n\n//   return (\n//     <>\n//       <div className='Convertertitle'><h1>Converter</h1></div>\n//       {error && <ErrorMessage message={error} />}\n//       <div className='ConverterBody'>\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={amount}\n//             onChange={handleAmountChange}\n//           />\n//           <CurrencySelect\n//             value={fromCurrency}\n//             onChange={(e) => setFromCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <ExchangeButton onClick={handleExchange} />\n\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={result}\n//             readOnly={true}\n//           />\n//           <CurrencySelect\n//             value={toCurrency}\n//             onChange={(e) => setToCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <div className='ExchangeResult'>\n//           {loading ? <LoadingSpinner /> : (\n//             result && `${amount} ${fromCurrency} = ${result} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='Data'>\n//           <UserInput \n//             type=\"date\"\n//             value={date}\n//             onChange={handleDateChange}\n//           />\n//         </div>\n\n//         <div className='HistoricalRate'>\n//           {historicalRate && (\n//             `Historical Rate (${date}): 1 ${fromCurrency} = ${historicalRate} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='LastUpdateData'>\n//           {lastUpdate && `Last updated: ${lastUpdate}`}\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// function LineChart() {\n//   return <h1>LineChart</h1>;\n// }\n\n// function ExchangeList() {\n//   const { selectedCurrency } = useContext(CurrencyContext);\n//   const [rates, setRates] = useState({});\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n\n//   // 常用货币列表\n//   const commonCurrencies = [\"EUR\", \"CNY\", \"USD\", \"JPY\", \"CHF\", \"GBP\"].filter(\n//     currency => currency !== selectedCurrency\n//   );\n\n//   useEffect(() => {\n//     const fetchRates = async () => {\n//       setLoading(true);\n//       setError(\"\");\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${selectedCurrency}`\n//         );\n//         const data = await response.json();\n\n//         if (data.result === \"success\") {\n//           setRates(data.conversion_rates);\n//         } else {\n//           setError(\"Failed to fetch exchange rates\");\n//         }\n//       } catch (error) {\n//         setError(\"Error loading exchange rates\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (selectedCurrency) {\n//       fetchRates();\n//     }\n//   }, [selectedCurrency]);\n\n//   if (loading) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"loading-spinner\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"error-message\">{error}</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"exchange-list\">\n//       <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//       <div className=\"rates-grid\">\n//         {commonCurrencies.map((currency) => (\n//           <div key={currency} className=\"rate-card\">\n//             <div className=\"currency-code\">{currency}</div>\n//             <div className=\"rate-value\">\n//               1 {selectedCurrency} = {rates[currency]?.toFixed(4)} {currency}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// // 主应用组件\n// export default function App() {\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n\n//   return (\n//     <CurrencyContext.Provider value={{ selectedCurrency, setSelectedCurrency }}>\n//       <div className='Header'><Header/></div>\n//       <div className='Converter'><Converter/></div>\n//       <div className='LineChart'><LineChart/></div>\n//       <div className='ExchangeList'><ExchangeList/></div>\n//     </CurrencyContext.Provider>\n//   );\n// }\n\nimport { useState, useEffect, useContext } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// 注册 Chart.js 组件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction LineChart() {\n  _s();\n  const {\n    selectedCurrency\n  } = useContext(CurrencyContext);\n  const [historicalData, setHistoricalData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [comparisonCurrency, setComparisonCurrency] = useState(\"EUR\");\n  const [currencies, setCurrencies] = useState([]);\n\n  // 获取可用货币列表\n  useEffect(() => {\n    const fetchCurrencies = async () => {\n      try {\n        const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`);\n        const data = await response.json();\n        if (data.result === \"success\") {\n          const availableCurrencies = Object.keys(data.conversion_rates).filter(currency => currency !== selectedCurrency);\n          setCurrencies(availableCurrencies);\n        }\n      } catch (error) {\n        setError(\"Failed to load currencies\");\n      }\n    };\n    fetchCurrencies();\n  }, [selectedCurrency]);\n\n  // 获取历史数据\n  useEffect(() => {\n    const fetchHistoricalData = async () => {\n      setLoading(true);\n      setError(\"\");\n      try {\n        // 获取过去7天的日期\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date();\n          date.setDate(date.getDate() - i);\n          return date.toISOString().split('T')[0];\n        }).reverse();\n\n        // 获取每一天的汇率数据\n        const ratesPromises = dates.map(async date => {\n          const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${selectedCurrency}/${date}`);\n          return response.json();\n        });\n        const results = await Promise.all(ratesPromises);\n        const rates = results.map(data => data.conversion_rates ? data.conversion_rates[comparisonCurrency] : null);\n        setHistoricalData({\n          labels: dates,\n          datasets: [{\n            label: `${selectedCurrency} to ${comparisonCurrency}`,\n            data: rates,\n            fill: false,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        });\n      } catch (error) {\n        setError(\"Error fetching historical data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (selectedCurrency && comparisonCurrency) {\n      fetchHistoricalData();\n    }\n  }, [selectedCurrency, comparisonCurrency]);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Exchange Rate Trends (Last 7 Days)'\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false\n      }\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Historical Trends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Historical Trends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Historical Trends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: comparisonCurrency,\n        onChange: e => setComparisonCurrency(e.target.value),\n        className: \"currency-select\",\n        children: currencies.map(currency => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: currency,\n          children: currency\n        }, currency, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: historicalData.labels.length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n        data: historicalData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart, \"XpMi3EjOdgemrERQROy/3oVdqdg=\");\n_c = LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["useState","useEffect","useContext","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","LineChart","_s","selectedCurrency","CurrencyContext","historicalData","setHistoricalData","labels","datasets","loading","setLoading","error","setError","comparisonCurrency","setComparisonCurrency","currencies","setCurrencies","fetchCurrencies","response","fetch","data","json","result","availableCurrencies","Object","keys","conversion_rates","filter","currency","fetchHistoricalData","dates","Array","from","length","_","i","date","Date","setDate","getDate","toISOString","split","reverse","ratesPromises","map","results","Promise","all","rates","label","fill","borderColor","tension","options","responsive","plugins","legend","position","title","display","text","scales","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["E:/Mini-project/src/App.js"],"sourcesContent":["// import { useState, useEffect, createContext, useContext } from 'react';\n// import './styles.css';\n\n// // 创建 Currency Context\n// const CurrencyContext = createContext();\n\n// function Header() {\n//   return <header><h1>ExchangeRate</h1></header>;\n// }\n\n// // 货币选择组件\n// function CurrencySelect({ value, onChange, currencies }) {\n//   return (\n//     <select \n//       className='CurrencySelect' \n//       value={value} \n//       onChange={onChange}\n//     >\n//       {currencies.map((currency) => (\n//         <option key={currency} value={currency}>\n//           {currency}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n\n// // 输入组件\n// function UserInput({ value, onChange, readOnly = false, type = \"text\" }) {\n//   return (\n//     <label>\n//       <input \n//         className='CurrencyName'\n//         value={value}\n//         onChange={onChange}\n//         readOnly={readOnly}\n//         type={type}\n//       />\n//     </label>\n//   );\n// }\n\n// // 交换按钮组件\n// function ExchangeButton({ onClick }) {\n//   return (\n//     <button className='ExchangeButton' onClick={onClick}>\n//       <img src=\"https://gd-hbimg.huaban.com/936d8460afb48f0c0737186352ba325e0a7f7dc4641e-oRIMdv_fw658\" alt=\"exchange\"/>\n//     </button>\n//   );\n// }\n\n// // 加载指示器组件\n// function LoadingSpinner() {\n//   return <div className=\"loading-spinner\"></div>;\n// }\n\n// // 错误消息组件\n// function ErrorMessage({ message }) {\n//   return <div className=\"error-message\">{message}</div>;\n// }\n\n// function Converter() {\n//   const { selectedCurrency, setSelectedCurrency } = useContext(CurrencyContext);\n//   const [fromCurrency, setFromCurrency] = useState(selectedCurrency);\n//   const [toCurrency, setToCurrency] = useState(\"EUR\");\n//   const [amount, setAmount] = useState(\"1\");\n//   const [result, setResult] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [lastUpdate, setLastUpdate] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n//   const [currencies, setCurrencies] = useState([]);\n//   const [historicalRate, setHistoricalRate] = useState(null);\n\n//   // 当fromCurrency改变时更新Context\n//   useEffect(() => {\n//     setSelectedCurrency(fromCurrency);\n//   }, [fromCurrency, setSelectedCurrency]);\n\n//   // 获取可用货币列表\n//   useEffect(() => {\n//     const fetchCurrencies = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`\n//         );\n//         const data = await response.json();\n//         if (data.result === \"success\") {\n//           setCurrencies(Object.keys(data.conversion_rates));\n//         }\n//       } catch (error) {\n//         setError(\"Failed to load currencies\");\n//       }\n//     };\n//     fetchCurrencies();\n//   }, []);\n\n//   // 获取当前汇率\n//   const fetchExchangeRate = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`\n//       );\n//       const data = await response.json();\n      \n//       if (data.result === \"success\") {\n//         const rate = data.conversion_rates[toCurrency];\n//         const calculatedResult = (parseFloat(amount) * rate).toFixed(2);\n//         setResult(calculatedResult);\n        \n//         const updateDate = new Date(data.time_last_update_unix * 1000);\n//         setLastUpdate(updateDate.toLocaleDateString());\n//       } else {\n//         setError(\"Failed to get exchange rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching exchange rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 获取历史汇率\n//   const fetchHistoricalRate = async (selectedDate) => {\n//     if (!selectedDate) return;\n    \n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${fromCurrency}/${formattedDate}`\n//       );\n//       const data = await response.json();\n      \n//       if (data.result === \"success\") {\n//         const historicalRate = data.conversion_rates[toCurrency];\n//         setHistoricalRate(historicalRate);\n//       } else {\n//         setError(\"Failed to get historical rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching historical rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 当输入值改变时自动获取新的汇率\n//   useEffect(() => {\n//     if (amount && fromCurrency && toCurrency) {\n//       fetchExchangeRate();\n//     }\n//   }, [amount, fromCurrency, toCurrency]);\n\n//   // 处理金额输入变化\n//   const handleAmountChange = (e) => {\n//     const value = e.target.value;\n//     if (/^\\d*\\.?\\d*$/.test(value)) {\n//       setAmount(value);\n//     }\n//   };\n\n//   // 处理日期输入变化\n//   const handleDateChange = (e) => {\n//     const selectedDate = e.target.value;\n//     setDate(selectedDate);\n//     fetchHistoricalRate(selectedDate);\n//   };\n\n//   // 交换货币\n//   const handleExchange = () => {\n//     setFromCurrency(toCurrency);\n//     setToCurrency(fromCurrency);\n//   };\n\n//   return (\n//     <>\n//       <div className='Convertertitle'><h1>Converter</h1></div>\n//       {error && <ErrorMessage message={error} />}\n//       <div className='ConverterBody'>\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={amount}\n//             onChange={handleAmountChange}\n//           />\n//           <CurrencySelect\n//             value={fromCurrency}\n//             onChange={(e) => setFromCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <ExchangeButton onClick={handleExchange} />\n\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={result}\n//             readOnly={true}\n//           />\n//           <CurrencySelect\n//             value={toCurrency}\n//             onChange={(e) => setToCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <div className='ExchangeResult'>\n//           {loading ? <LoadingSpinner /> : (\n//             result && `${amount} ${fromCurrency} = ${result} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='Data'>\n//           <UserInput \n//             type=\"date\"\n//             value={date}\n//             onChange={handleDateChange}\n//           />\n//         </div>\n\n//         <div className='HistoricalRate'>\n//           {historicalRate && (\n//             `Historical Rate (${date}): 1 ${fromCurrency} = ${historicalRate} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='LastUpdateData'>\n//           {lastUpdate && `Last updated: ${lastUpdate}`}\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// function LineChart() {\n//   return <h1>LineChart</h1>;\n// }\n\n// function ExchangeList() {\n//   const { selectedCurrency } = useContext(CurrencyContext);\n//   const [rates, setRates] = useState({});\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n  \n//   // 常用货币列表\n//   const commonCurrencies = [\"EUR\", \"CNY\", \"USD\", \"JPY\", \"CHF\", \"GBP\"].filter(\n//     currency => currency !== selectedCurrency\n//   );\n\n//   useEffect(() => {\n//     const fetchRates = async () => {\n//       setLoading(true);\n//       setError(\"\");\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${selectedCurrency}`\n//         );\n//         const data = await response.json();\n        \n//         if (data.result === \"success\") {\n//           setRates(data.conversion_rates);\n//         } else {\n//           setError(\"Failed to fetch exchange rates\");\n//         }\n//       } catch (error) {\n//         setError(\"Error loading exchange rates\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (selectedCurrency) {\n//       fetchRates();\n//     }\n//   }, [selectedCurrency]);\n\n//   if (loading) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"loading-spinner\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"error-message\">{error}</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"exchange-list\">\n//       <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//       <div className=\"rates-grid\">\n//         {commonCurrencies.map((currency) => (\n//           <div key={currency} className=\"rate-card\">\n//             <div className=\"currency-code\">{currency}</div>\n//             <div className=\"rate-value\">\n//               1 {selectedCurrency} = {rates[currency]?.toFixed(4)} {currency}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// // 主应用组件\n// export default function App() {\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n\n//   return (\n//     <CurrencyContext.Provider value={{ selectedCurrency, setSelectedCurrency }}>\n//       <div className='Header'><Header/></div>\n//       <div className='Converter'><Converter/></div>\n//       <div className='LineChart'><LineChart/></div>\n//       <div className='ExchangeList'><ExchangeList/></div>\n//     </CurrencyContext.Provider>\n//   );\n// }\n\nimport { useState, useEffect, useContext } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\n// 注册 Chart.js 组件\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction LineChart() {\n  const { selectedCurrency } = useContext(CurrencyContext);\n  const [historicalData, setHistoricalData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [comparisonCurrency, setComparisonCurrency] = useState(\"EUR\");\n  const [currencies, setCurrencies] = useState([]);\n\n  // 获取可用货币列表\n  useEffect(() => {\n    const fetchCurrencies = async () => {\n      try {\n        const response = await fetch(\n          `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`\n        );\n        const data = await response.json();\n        if (data.result === \"success\") {\n          const availableCurrencies = Object.keys(data.conversion_rates)\n            .filter(currency => currency !== selectedCurrency);\n          setCurrencies(availableCurrencies);\n        }\n      } catch (error) {\n        setError(\"Failed to load currencies\");\n      }\n    };\n    fetchCurrencies();\n  }, [selectedCurrency]);\n\n  // 获取历史数据\n  useEffect(() => {\n    const fetchHistoricalData = async () => {\n      setLoading(true);\n      setError(\"\");\n\n      try {\n        // 获取过去7天的日期\n        const dates = Array.from({ length: 7 }, (_, i) => {\n          const date = new Date();\n          date.setDate(date.getDate() - i);\n          return date.toISOString().split('T')[0];\n        }).reverse();\n\n        // 获取每一天的汇率数据\n        const ratesPromises = dates.map(async (date) => {\n          const response = await fetch(\n            `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${selectedCurrency}/${date}`\n          );\n          return response.json();\n        });\n\n        const results = await Promise.all(ratesPromises);\n        const rates = results.map(data => \n          data.conversion_rates ? data.conversion_rates[comparisonCurrency] : null\n        );\n\n        setHistoricalData({\n          labels: dates,\n          datasets: [\n            {\n              label: `${selectedCurrency} to ${comparisonCurrency}`,\n              data: rates,\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }\n          ]\n        });\n      } catch (error) {\n        setError(\"Error fetching historical data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (selectedCurrency && comparisonCurrency) {\n      fetchHistoricalData();\n    }\n  }, [selectedCurrency, comparisonCurrency]);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Exchange Rate Trends (Last 7 Days)'\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"line-chart\">\n        <h2>Historical Trends</h2>\n        <div className=\"loading-spinner\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"line-chart\">\n        <h2>Historical Trends</h2>\n        <div className=\"error-message\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"line-chart\">\n      <h2>Historical Trends</h2>\n      <div className=\"chart-controls\">\n        <select\n          value={comparisonCurrency}\n          onChange={(e) => setComparisonCurrency(e.target.value)}\n          className=\"currency-select\"\n        >\n          {currencies.map((currency) => (\n            <option key={currency} value={currency}>\n              {currency}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"chart-container\">\n        {historicalData.labels.length > 0 && (\n          <Line data={historicalData} options={options} />\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}