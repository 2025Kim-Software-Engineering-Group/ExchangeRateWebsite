{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import { Line } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// } from 'chart.js';\n// import { translations } from './translations';\n// import './styles.css';\n\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// function App() {\n//   const [fromCurrency, setFromCurrency] = useState('USD');\n//   const [toCurrency, setToCurrency] = useState('EUR');\n//   const [amount, setAmount] = useState(1);\n//   const [exchangeRate, setExchangeRate] = useState(null);\n//   const [lastUpdated, setLastUpdated] = useState('');\n//   const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n//   const [historicalRates, setHistoricalRates] = useState([]);\n//   const [fromInput, setFromInput] = useState('USD');\n//   const [toInput, setToInput] = useState('EUR');\n//   const [showFromDropdown, setShowFromDropdown] = useState(false);\n//   const [showToDropdown, setShowToDropdown] = useState(false);\n//   const [currentLanguage, setCurrentLanguage] = useState('en');\n//   const [currencyRates, setCurrencyRates] = useState({});\n\n//   const t = translations[currentLanguage];\n\n//   const currencies = [\n//     'USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD', 'CHF', 'CNY', 'HKD', 'NZD',\n//     'AED', 'INR', 'SGD', 'MXN', 'BRL'\n//   ];\n\n//   const fromDropdownRef = useRef(null);\n//   const toDropdownRef = useRef(null);\n\n//   const handleExchange = () => {\n//     const tempCurrency = fromCurrency;\n//     const tempInput = fromInput;\n//     setFromCurrency(toCurrency);\n//     setFromInput(toCurrency);\n//     setToCurrency(tempCurrency);\n//     setToInput(tempInput);\n//   };\n\n//   useEffect(() => {\n//     const handleClickOutside = (event) => {\n//       if (fromDropdownRef.current && !fromDropdownRef.current.contains(event.target)) {\n//         setShowFromDropdown(false);\n//       }\n//       if (toDropdownRef.current && !toDropdownRef.current.contains(event.target)) {\n//         setShowToDropdown(false);\n//       }\n//     };\n\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     fetchExchangeRate();\n//     fetchHistoricalRates();\n//     fetchAllRates();\n//   }, [fromCurrency, toCurrency, selectedDate]);\n\n//   const fetchAllRates = async () => {\n//     try {\n//       const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`);\n//       const data = await response.json();\n//       setCurrencyRates(data.conversion_rates);\n//     } catch (error) {\n//       console.error('Error fetching all rates:', error);\n//     }\n//   };\n\n//   const fetchExchangeRate = async () => {\n//     try {\n//       const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`);\n//       const data = await response.json();\n//       setExchangeRate(data.conversion_rates[toCurrency]);\n//       setLastUpdated(new Date().toLocaleString());\n//     } catch (error) {\n//       console.error('Error fetching exchange rate:', error);\n//     }\n//   };\n\n//   const fetchHistoricalRates = async () => {\n//     try {\n//       const dates = [];\n//       const rates = [];\n//       const endDate = new Date();\n//       const startDate = new Date();\n//       startDate.setMonth(startDate.getMonth() - 1);\n\n//       for (let d = startDate; d <= endDate; d.setDate(d.getDate() + 5)) {\n//         const dateStr = d.toISOString().split('T')[0];\n//         const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`);\n//         const data = await response.json();\n//         dates.push(dateStr);\n//         rates.push(data.conversion_rates[toCurrency]);\n//       }\n\n//       setHistoricalRates({\n//         labels: dates,\n//         datasets: [\n//           {\n//             label: `${fromCurrency} to ${toCurrency}`,\n//             data: rates,\n//             fill: false,\n//             borderColor: 'rgb(75, 192, 192)',\n//             tension: 0.1\n//           }\n//         ]\n//       });\n//     } catch (error) {\n//       console.error('Error fetching historical rates:', error);\n//     }\n//   };\n\n//   const convertAmount = () => {\n//     if (exchangeRate === null) return '';\n//     return (amount * exchangeRate).toFixed(2);\n//   };\n\n//   const handleFromInputChange = (e) => {\n//     const value = e.target.value.toUpperCase();\n//     setFromInput(value);\n//     setShowFromDropdown(true);\n\n//     // Update fromCurrency if input matches a currency\n//     const matchedCurrencies = currencies.filter(currency =>\n//       currency.toUpperCase().includes(value)\n//     );\n//     if (matchedCurrencies.length > 0) {\n//       setFromCurrency(matchedCurrencies[0]);\n//     }\n//   };\n\n//   const handleToInputChange = (e) => {\n//     const value = e.target.value.toUpperCase();\n//     setToInput(value);\n//     setShowToDropdown(true);\n\n//     // Update toCurrency if input matches a currency\n//     const matchedCurrencies = currencies.filter(currency =>\n//       currency.toUpperCase().includes(value)\n//     );\n//     if (matchedCurrencies.length > 0) {\n//       setToCurrency(matchedCurrencies[0]);\n//     }\n//   };\n\n//   const handleFromCurrencySelect = (currency) => {\n//     setFromCurrency(currency);\n//     setFromInput(currency);\n//     setShowFromDropdown(false);\n//   };\n\n//   const handleToCurrencySelect = (currency) => {\n//     setToCurrency(currency);\n//     setToInput(currency);\n//     setShowToDropdown(false);\n//   };\n\n//   const handleAmountChange = (e) => {\n//     setAmount(e.target.value);\n//   };\n\n//   const handleDateChange = (e) => {\n//     setSelectedDate(e.target.value);\n//   };\n\n//   const filteredFromCurrencies = currencies.filter(currency =>\n//     currency.toUpperCase().includes(fromInput.toUpperCase())\n//   );\n\n//   const filteredToCurrencies = currencies.filter(currency =>\n//     currency.toUpperCase().includes(toInput.toUpperCase())\n//   );\n\n//   const LanguageSelector = () => (\n//     <div className=\"language-selector\">\n//       {Object.keys(translations).map((lang) => (\n//         <button\n//           key={lang}\n//           className={`language-button ${currentLanguage === lang ? 'active' : ''}`}\n//           onClick={() => setCurrentLanguage(lang)}\n//         >\n//           {translations[lang].languages[lang]}\n//         </button>\n//       ))}\n//     </div>\n//   );\n\n//   const chartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         position: 'top',\n//       },\n//       title: {\n//         display: true,\n//         text: 'Exchange Rate Trend'\n//       }\n//     },\n//     scales: {\n//       y: {\n//         beginAtZero: false\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <LanguageSelector />\n//       <h1>{t.title}</h1>\n\n//       <div className=\"main-container\">\n//         <div className=\"left-panel\">\n//           <div className=\"converter-container\">\n//             <div className=\"currency-inputs\">\n//               <div className=\"currency-row\">\n//                 <div className=\"currency-input\">\n//                   <div className=\"currency-select\" ref={fromDropdownRef}>\n//                     <input\n//                       type=\"text\"\n//                       value={fromInput}\n//                       onChange={handleFromInputChange}\n//                       onFocus={() => setShowFromDropdown(true)}\n//                       placeholder={t.selectCurrency}\n//                     />\n//                     {showFromDropdown && filteredFromCurrencies.length > 0 && (\n//                       <div className=\"currency-dropdown\">\n//                         {filteredFromCurrencies.map(currency => (\n//                           <div\n//                             key={currency}\n//                             className=\"currency-option\"\n//                             onClick={() => handleFromCurrencySelect(currency)}\n//                           >\n//                             {currency} - {t.currencyNames[currency]}\n//                           </div>\n//                         ))}\n//                       </div>\n//                     )}\n//                   </div>\n//                 </div>\n\n//                 <button className=\"exchange-button\" onClick={handleExchange}>\n//                   <span className=\"exchange-icon\">â‡„</span>\n//                 </button>\n\n//                 <div className=\"currency-input\">\n//                   <div className=\"currency-select\" ref={toDropdownRef}>\n//                     <input\n//                       type=\"text\"\n//                       value={toInput}\n//                       onChange={handleToInputChange}\n//                       onFocus={() => setShowToDropdown(true)}\n//                       placeholder={t.selectCurrency}\n//                     />\n//                     {showToDropdown && filteredToCurrencies.length > 0 && (\n//                       <div className=\"currency-dropdown\">\n//                         {filteredToCurrencies.map(currency => (\n//                           <div\n//                             key={currency}\n//                             className=\"currency-option\"\n//                             onClick={() => handleToCurrencySelect(currency)}\n//                           >\n//                             {currency} - {t.currencyNames[currency]}\n//                           </div>\n//                         ))}\n//                       </div>\n//                     )}\n//                   </div>\n//                 </div>\n//               </div>\n\n//               <div className=\"amount-row\">\n//                 <div className=\"amount-input\">\n//                   <input\n//                     type=\"number\"\n//                     value={amount}\n//                     onChange={handleAmountChange}\n//                     placeholder={t.amount}\n//                   />\n//                 </div>\n//                 <div className=\"amount-result\">\n//                   <input\n//                     type=\"text\"\n//                     value={convertAmount()}\n//                     readOnly\n//                     placeholder={t.convertedAmount}\n//                   />\n//                 </div>\n//               </div>\n\n//               <div className=\"date-row\">\n//                 <div className=\"date-input\">\n//                   <input\n//                     type=\"date\"\n//                     value={selectedDate}\n//                     onChange={handleDateChange}\n//                   />\n//                 </div>\n//                 <span className=\"last-updated\">\n//                   {t.lastUpdated}: {lastUpdated}\n//                 </span>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chart-container\">\n//             <h2>{t.historicalRates}: {fromCurrency} {t.to} {toCurrency}</h2>\n//             {historicalRates.datasets && (\n//               <Line data={historicalRates} options={chartOptions} />\n//             )}\n//           </div>\n//         </div>\n\n//         <div className=\"watchlist-container\">\n//           <h2>{t.popularCurrencies}</h2>\n//           <div className=\"watchlist\">\n//             {currencies.map(currency => (\n//               <div key={currency} className=\"watchlist-item\">\n//                 <span className=\"currency-code\">{currency}</span>\n//                 <span className=\"currency-name\">{t.currencyNames[currency]}</span>\n//                 <span className=\"currency-rate\">\n//                   {currencyRates[currency] ? \n//                     `1 USD = ${currencyRates[currency].toFixed(4)} ${currency}` \n//                     : 'Loading...'}\n//                 </span>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["E:/Mini-project/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { Line } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// } from 'chart.js';\n// import { translations } from './translations';\n// import './styles.css';\n\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// function App() {\n//   const [fromCurrency, setFromCurrency] = useState('USD');\n//   const [toCurrency, setToCurrency] = useState('EUR');\n//   const [amount, setAmount] = useState(1);\n//   const [exchangeRate, setExchangeRate] = useState(null);\n//   const [lastUpdated, setLastUpdated] = useState('');\n//   const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n//   const [historicalRates, setHistoricalRates] = useState([]);\n//   const [fromInput, setFromInput] = useState('USD');\n//   const [toInput, setToInput] = useState('EUR');\n//   const [showFromDropdown, setShowFromDropdown] = useState(false);\n//   const [showToDropdown, setShowToDropdown] = useState(false);\n//   const [currentLanguage, setCurrentLanguage] = useState('en');\n//   const [currencyRates, setCurrencyRates] = useState({});\n\n//   const t = translations[currentLanguage];\n\n//   const currencies = [\n//     'USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD', 'CHF', 'CNY', 'HKD', 'NZD',\n//     'AED', 'INR', 'SGD', 'MXN', 'BRL'\n//   ];\n\n//   const fromDropdownRef = useRef(null);\n//   const toDropdownRef = useRef(null);\n\n//   const handleExchange = () => {\n//     const tempCurrency = fromCurrency;\n//     const tempInput = fromInput;\n//     setFromCurrency(toCurrency);\n//     setFromInput(toCurrency);\n//     setToCurrency(tempCurrency);\n//     setToInput(tempInput);\n//   };\n\n//   useEffect(() => {\n//     const handleClickOutside = (event) => {\n//       if (fromDropdownRef.current && !fromDropdownRef.current.contains(event.target)) {\n//         setShowFromDropdown(false);\n//       }\n//       if (toDropdownRef.current && !toDropdownRef.current.contains(event.target)) {\n//         setShowToDropdown(false);\n//       }\n//     };\n\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     fetchExchangeRate();\n//     fetchHistoricalRates();\n//     fetchAllRates();\n//   }, [fromCurrency, toCurrency, selectedDate]);\n\n//   const fetchAllRates = async () => {\n//     try {\n//       const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`);\n//       const data = await response.json();\n//       setCurrencyRates(data.conversion_rates);\n//     } catch (error) {\n//       console.error('Error fetching all rates:', error);\n//     }\n//   };\n\n//   const fetchExchangeRate = async () => {\n//     try {\n//       const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`);\n//       const data = await response.json();\n//       setExchangeRate(data.conversion_rates[toCurrency]);\n//       setLastUpdated(new Date().toLocaleString());\n//     } catch (error) {\n//       console.error('Error fetching exchange rate:', error);\n//     }\n//   };\n\n//   const fetchHistoricalRates = async () => {\n//     try {\n//       const dates = [];\n//       const rates = [];\n//       const endDate = new Date();\n//       const startDate = new Date();\n//       startDate.setMonth(startDate.getMonth() - 1);\n\n//       for (let d = startDate; d <= endDate; d.setDate(d.getDate() + 5)) {\n//         const dateStr = d.toISOString().split('T')[0];\n//         const response = await fetch(`https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`);\n//         const data = await response.json();\n//         dates.push(dateStr);\n//         rates.push(data.conversion_rates[toCurrency]);\n//       }\n\n//       setHistoricalRates({\n//         labels: dates,\n//         datasets: [\n//           {\n//             label: `${fromCurrency} to ${toCurrency}`,\n//             data: rates,\n//             fill: false,\n//             borderColor: 'rgb(75, 192, 192)',\n//             tension: 0.1\n//           }\n//         ]\n//       });\n//     } catch (error) {\n//       console.error('Error fetching historical rates:', error);\n//     }\n//   };\n\n//   const convertAmount = () => {\n//     if (exchangeRate === null) return '';\n//     return (amount * exchangeRate).toFixed(2);\n//   };\n\n//   const handleFromInputChange = (e) => {\n//     const value = e.target.value.toUpperCase();\n//     setFromInput(value);\n//     setShowFromDropdown(true);\n    \n//     // Update fromCurrency if input matches a currency\n//     const matchedCurrencies = currencies.filter(currency =>\n//       currency.toUpperCase().includes(value)\n//     );\n//     if (matchedCurrencies.length > 0) {\n//       setFromCurrency(matchedCurrencies[0]);\n//     }\n//   };\n\n//   const handleToInputChange = (e) => {\n//     const value = e.target.value.toUpperCase();\n//     setToInput(value);\n//     setShowToDropdown(true);\n    \n//     // Update toCurrency if input matches a currency\n//     const matchedCurrencies = currencies.filter(currency =>\n//       currency.toUpperCase().includes(value)\n//     );\n//     if (matchedCurrencies.length > 0) {\n//       setToCurrency(matchedCurrencies[0]);\n//     }\n//   };\n\n//   const handleFromCurrencySelect = (currency) => {\n//     setFromCurrency(currency);\n//     setFromInput(currency);\n//     setShowFromDropdown(false);\n//   };\n\n//   const handleToCurrencySelect = (currency) => {\n//     setToCurrency(currency);\n//     setToInput(currency);\n//     setShowToDropdown(false);\n//   };\n\n//   const handleAmountChange = (e) => {\n//     setAmount(e.target.value);\n//   };\n\n//   const handleDateChange = (e) => {\n//     setSelectedDate(e.target.value);\n//   };\n\n//   const filteredFromCurrencies = currencies.filter(currency =>\n//     currency.toUpperCase().includes(fromInput.toUpperCase())\n//   );\n\n//   const filteredToCurrencies = currencies.filter(currency =>\n//     currency.toUpperCase().includes(toInput.toUpperCase())\n//   );\n\n//   const LanguageSelector = () => (\n//     <div className=\"language-selector\">\n//       {Object.keys(translations).map((lang) => (\n//         <button\n//           key={lang}\n//           className={`language-button ${currentLanguage === lang ? 'active' : ''}`}\n//           onClick={() => setCurrentLanguage(lang)}\n//         >\n//           {translations[lang].languages[lang]}\n//         </button>\n//       ))}\n//     </div>\n//   );\n\n//   const chartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         position: 'top',\n//       },\n//       title: {\n//         display: true,\n//         text: 'Exchange Rate Trend'\n//       }\n//     },\n//     scales: {\n//       y: {\n//         beginAtZero: false\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <LanguageSelector />\n//       <h1>{t.title}</h1>\n      \n//       <div className=\"main-container\">\n//         <div className=\"left-panel\">\n//           <div className=\"converter-container\">\n//             <div className=\"currency-inputs\">\n//               <div className=\"currency-row\">\n//                 <div className=\"currency-input\">\n//                   <div className=\"currency-select\" ref={fromDropdownRef}>\n//                     <input\n//                       type=\"text\"\n//                       value={fromInput}\n//                       onChange={handleFromInputChange}\n//                       onFocus={() => setShowFromDropdown(true)}\n//                       placeholder={t.selectCurrency}\n//                     />\n//                     {showFromDropdown && filteredFromCurrencies.length > 0 && (\n//                       <div className=\"currency-dropdown\">\n//                         {filteredFromCurrencies.map(currency => (\n//                           <div\n//                             key={currency}\n//                             className=\"currency-option\"\n//                             onClick={() => handleFromCurrencySelect(currency)}\n//                           >\n//                             {currency} - {t.currencyNames[currency]}\n//                           </div>\n//                         ))}\n//                       </div>\n//                     )}\n//                   </div>\n//                 </div>\n\n//                 <button className=\"exchange-button\" onClick={handleExchange}>\n//                   <span className=\"exchange-icon\">â‡„</span>\n//                 </button>\n                \n//                 <div className=\"currency-input\">\n//                   <div className=\"currency-select\" ref={toDropdownRef}>\n//                     <input\n//                       type=\"text\"\n//                       value={toInput}\n//                       onChange={handleToInputChange}\n//                       onFocus={() => setShowToDropdown(true)}\n//                       placeholder={t.selectCurrency}\n//                     />\n//                     {showToDropdown && filteredToCurrencies.length > 0 && (\n//                       <div className=\"currency-dropdown\">\n//                         {filteredToCurrencies.map(currency => (\n//                           <div\n//                             key={currency}\n//                             className=\"currency-option\"\n//                             onClick={() => handleToCurrencySelect(currency)}\n//                           >\n//                             {currency} - {t.currencyNames[currency]}\n//                           </div>\n//                         ))}\n//                       </div>\n//                     )}\n//                   </div>\n//                 </div>\n//               </div>\n\n//               <div className=\"amount-row\">\n//                 <div className=\"amount-input\">\n//                   <input\n//                     type=\"number\"\n//                     value={amount}\n//                     onChange={handleAmountChange}\n//                     placeholder={t.amount}\n//                   />\n//                 </div>\n//                 <div className=\"amount-result\">\n//                   <input\n//                     type=\"text\"\n//                     value={convertAmount()}\n//                     readOnly\n//                     placeholder={t.convertedAmount}\n//                   />\n//                 </div>\n//               </div>\n\n//               <div className=\"date-row\">\n//                 <div className=\"date-input\">\n//                   <input\n//                     type=\"date\"\n//                     value={selectedDate}\n//                     onChange={handleDateChange}\n//                   />\n//                 </div>\n//                 <span className=\"last-updated\">\n//                   {t.lastUpdated}: {lastUpdated}\n//                 </span>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chart-container\">\n//             <h2>{t.historicalRates}: {fromCurrency} {t.to} {toCurrency}</h2>\n//             {historicalRates.datasets && (\n//               <Line data={historicalRates} options={chartOptions} />\n//             )}\n//           </div>\n//         </div>\n\n//         <div className=\"watchlist-container\">\n//           <h2>{t.popularCurrencies}</h2>\n//           <div className=\"watchlist\">\n//             {currencies.map(currency => (\n//               <div key={currency} className=\"watchlist-item\">\n//                 <span className=\"currency-code\">{currency}</span>\n//                 <span className=\"currency-name\">{t.currencyNames[currency]}</span>\n//                 <span className=\"currency-rate\">\n//                   {currencyRates[currency] ? \n//                     `1 USD = ${currencyRates[currency].toFixed(4)} ${currency}` \n//                     : 'Loading...'}\n//                 </span>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}