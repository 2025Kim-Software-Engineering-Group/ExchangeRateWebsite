{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mini-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// import { useState, useEffect, createContext, useContext } from 'react';\n// import './styles.css';\n\n// // 创建 Currency Context\n// const CurrencyContext = createContext();\n\n// function Header() {\n//   return <header><h1>ExchangeRate</h1></header>;\n// }\n\n// // 货币选择组件\n// function CurrencySelect({ value, onChange, currencies }) {\n//   return (\n//     <select \n//       className='CurrencySelect' \n//       value={value} \n//       onChange={onChange}\n//     >\n//       {currencies.map((currency) => (\n//         <option key={currency} value={currency}>\n//           {currency}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n\n// // 输入组件\n// function UserInput({ value, onChange, readOnly = false, type = \"text\" }) {\n//   return (\n//     <label>\n//       <input \n//         className='CurrencyName'\n//         value={value}\n//         onChange={onChange}\n//         readOnly={readOnly}\n//         type={type}\n//       />\n//     </label>\n//   );\n// }\n\n// // 交换按钮组件\n// function ExchangeButton({ onClick }) {\n//   return (\n//     <button className='ExchangeButton' onClick={onClick}>\n//       <img src=\"https://gd-hbimg.huaban.com/936d8460afb48f0c0737186352ba325e0a7f7dc4641e-oRIMdv_fw658\" alt=\"exchange\"/>\n//     </button>\n//   );\n// }\n\n// // 加载指示器组件\n// function LoadingSpinner() {\n//   return <div className=\"loading-spinner\"></div>;\n// }\n\n// // 错误消息组件\n// function ErrorMessage({ message }) {\n//   return <div className=\"error-message\">{message}</div>;\n// }\n\n// function Converter() {\n//   const { selectedCurrency, setSelectedCurrency } = useContext(CurrencyContext);\n//   const [fromCurrency, setFromCurrency] = useState(selectedCurrency);\n//   const [toCurrency, setToCurrency] = useState(\"EUR\");\n//   const [amount, setAmount] = useState(\"1\");\n//   const [result, setResult] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [lastUpdate, setLastUpdate] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n//   const [currencies, setCurrencies] = useState([]);\n//   const [historicalRate, setHistoricalRate] = useState(null);\n\n//   // 当fromCurrency改变时更新Context\n//   useEffect(() => {\n//     setSelectedCurrency(fromCurrency);\n//   }, [fromCurrency, setSelectedCurrency]);\n\n//   // 获取可用货币列表\n//   useEffect(() => {\n//     const fetchCurrencies = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`\n//         );\n//         const data = await response.json();\n//         if (data.result === \"success\") {\n//           setCurrencies(Object.keys(data.conversion_rates));\n//         }\n//       } catch (error) {\n//         setError(\"Failed to load currencies\");\n//       }\n//     };\n//     fetchCurrencies();\n//   }, []);\n\n//   // 获取当前汇率\n//   const fetchExchangeRate = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`\n//       );\n//       const data = await response.json();\n\n//       if (data.result === \"success\") {\n//         const rate = data.conversion_rates[toCurrency];\n//         const calculatedResult = (parseFloat(amount) * rate).toFixed(2);\n//         setResult(calculatedResult);\n\n//         const updateDate = new Date(data.time_last_update_unix * 1000);\n//         setLastUpdate(updateDate.toLocaleDateString());\n//       } else {\n//         setError(\"Failed to get exchange rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching exchange rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 获取历史汇率\n//   const fetchHistoricalRate = async (selectedDate) => {\n//     if (!selectedDate) return;\n\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${fromCurrency}/${formattedDate}`\n//       );\n//       const data = await response.json();\n\n//       if (data.result === \"success\") {\n//         const historicalRate = data.conversion_rates[toCurrency];\n//         setHistoricalRate(historicalRate);\n//       } else {\n//         setError(\"Failed to get historical rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching historical rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 当输入值改变时自动获取新的汇率\n//   useEffect(() => {\n//     if (amount && fromCurrency && toCurrency) {\n//       fetchExchangeRate();\n//     }\n//   }, [amount, fromCurrency, toCurrency]);\n\n//   // 处理金额输入变化\n//   const handleAmountChange = (e) => {\n//     const value = e.target.value;\n//     if (/^\\d*\\.?\\d*$/.test(value)) {\n//       setAmount(value);\n//     }\n//   };\n\n//   // 处理日期输入变化\n//   const handleDateChange = (e) => {\n//     const selectedDate = e.target.value;\n//     setDate(selectedDate);\n//     fetchHistoricalRate(selectedDate);\n//   };\n\n//   // 交换货币\n//   const handleExchange = () => {\n//     setFromCurrency(toCurrency);\n//     setToCurrency(fromCurrency);\n//   };\n\n//   return (\n//     <>\n//       <div className='Convertertitle'><h1>Converter</h1></div>\n//       {error && <ErrorMessage message={error} />}\n//       <div className='ConverterBody'>\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={amount}\n//             onChange={handleAmountChange}\n//           />\n//           <CurrencySelect\n//             value={fromCurrency}\n//             onChange={(e) => setFromCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <ExchangeButton onClick={handleExchange} />\n\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={result}\n//             readOnly={true}\n//           />\n//           <CurrencySelect\n//             value={toCurrency}\n//             onChange={(e) => setToCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <div className='ExchangeResult'>\n//           {loading ? <LoadingSpinner /> : (\n//             result && `${amount} ${fromCurrency} = ${result} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='Data'>\n//           <UserInput \n//             type=\"date\"\n//             value={date}\n//             onChange={handleDateChange}\n//           />\n//         </div>\n\n//         <div className='HistoricalRate'>\n//           {historicalRate && (\n//             `Historical Rate (${date}): 1 ${fromCurrency} = ${historicalRate} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='LastUpdateData'>\n//           {lastUpdate && `Last updated: ${lastUpdate}`}\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// function LineChart() {\n//   return <h1>LineChart</h1>;\n// }\n\n// function ExchangeList() {\n//   const { selectedCurrency } = useContext(CurrencyContext);\n//   const [rates, setRates] = useState({});\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n\n//   // 常用货币列表\n//   const commonCurrencies = [\"EUR\", \"CNY\", \"USD\", \"JPY\", \"CHF\", \"GBP\"].filter(\n//     currency => currency !== selectedCurrency\n//   );\n\n//   useEffect(() => {\n//     const fetchRates = async () => {\n//       setLoading(true);\n//       setError(\"\");\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${selectedCurrency}`\n//         );\n//         const data = await response.json();\n\n//         if (data.result === \"success\") {\n//           setRates(data.conversion_rates);\n//         } else {\n//           setError(\"Failed to fetch exchange rates\");\n//         }\n//       } catch (error) {\n//         setError(\"Error loading exchange rates\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (selectedCurrency) {\n//       fetchRates();\n//     }\n//   }, [selectedCurrency]);\n\n//   if (loading) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"loading-spinner\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"error-message\">{error}</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"exchange-list\">\n//       <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//       <div className=\"rates-grid\">\n//         {commonCurrencies.map((currency) => (\n//           <div key={currency} className=\"rate-card\">\n//             <div className=\"currency-code\">{currency}</div>\n//             <div className=\"rate-value\">\n//               1 {selectedCurrency} = {rates[currency]?.toFixed(4)} {currency}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// // 主应用组件\n// export default function App() {\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n\n//   return (\n//     <CurrencyContext.Provider value={{ selectedCurrency, setSelectedCurrency }}>\n//       <div className='Header'><Header/></div>\n//       <div className='Converter'><Converter/></div>\n//       <div className='LineChart'><LineChart/></div>\n//       <div className='ExchangeList'><ExchangeList/></div>\n//     </CurrencyContext.Provider>\n//   );\n// }\n\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencyContext = /*#__PURE__*/createContext();\n\n// 货币数据，包含缩写、全名和国旗emoji\nconst currencyInfo = {\n  USD: {\n    name: \"United States Dollar\",\n    flag: \"🇺🇸\"\n  },\n  EUR: {\n    name: \"Euro\",\n    flag: \"🇪🇺\"\n  },\n  GBP: {\n    name: \"British Pound\",\n    flag: \"🇬🇧\"\n  },\n  JPY: {\n    name: \"Japanese Yen\",\n    flag: \"🇯🇵\"\n  },\n  CNY: {\n    name: \"Chinese Yuan\",\n    flag: \"🇨🇳\"\n  }\n  // ... 其他货币\n};\nfunction Header() {\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ExchangeRate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 10\n  }, this);\n}\n\n// 货币输入和选择组件\n_c = Header;\nfunction CurrencyInput(_ref) {\n  _s();\n  var _currencyInfo$selecte, _currencyInfo$selecte2;\n  let {\n    value,\n    onChange,\n    currencies,\n    selectedCurrency\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInputValue(value);\n\n    // 过滤匹配的货币\n    const matches = currencies.filter(currency => currency.toLowerCase().includes(value.toLowerCase()));\n    setSuggestions(matches);\n  };\n  const handleSelect = currency => {\n    setInputValue('');\n    onChange(currency);\n    setSuggestions([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"currency-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"currency-search\",\n      value: inputValue,\n      onChange: handleInputChange,\n      placeholder: \"Search currency...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"currency-suggestions\",\n      children: suggestions.map(currency => {\n        var _currencyInfo$currenc, _currencyInfo$currenc2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currency-suggestion-item\",\n          onClick: () => handleSelect(currency),\n          children: [(_currencyInfo$currenc = currencyInfo[currency]) === null || _currencyInfo$currenc === void 0 ? void 0 : _currencyInfo$currenc.flag, \" \", currency, \" - \", (_currencyInfo$currenc2 = currencyInfo[currency]) === null || _currencyInfo$currenc2 === void 0 ? void 0 : _currencyInfo$currenc2.name]\n        }, currency, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-currency\",\n      children: [(_currencyInfo$selecte = currencyInfo[selectedCurrency]) === null || _currencyInfo$selecte === void 0 ? void 0 : _currencyInfo$selecte.flag, \" \", selectedCurrency, \" - \", (_currencyInfo$selecte2 = currencyInfo[selectedCurrency]) === null || _currencyInfo$selecte2 === void 0 ? void 0 : _currencyInfo$selecte2.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n\n// 其他组件保持不变...\n_s(CurrencyInput, \"+DOYf/qBz2ySRonOobbdzztR9JE=\");\n_c2 = CurrencyInput;\nfunction LineChart(_ref2) {\n  _s2();\n  let {\n    fromCurrency,\n    toCurrency\n  } = _ref2;\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const fetchHistoricalData = async () => {\n      // 获取过去30天的数据\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 30);\n\n      // 这里需要根据您的API调整\n      const response = await fetch(`your_historical_data_endpoint`);\n      const data = await response.json();\n      setChartData({\n        labels: data.dates,\n        datasets: [{\n          label: `${fromCurrency} to ${toCurrency} Exchange Rate`,\n          data: data.rates,\n          fill: false,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      });\n    };\n    if (fromCurrency && toCurrency) {\n      fetchHistoricalData();\n    }\n  }, [fromCurrency, toCurrency]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Exchange Rate Trend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this);\n}\n_s2(LineChart, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c3 = LineChart;\nfunction App() {\n  _s3();\n  const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n  return /*#__PURE__*/_jsxDEV(CurrencyContext.Provider, {\n    value: {\n      selectedCurrency,\n      setSelectedCurrency\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Header\",\n        children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Converter\",\n            children: /*#__PURE__*/_jsxDEV(Converter, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"LineChart\",\n            children: /*#__PURE__*/_jsxDEV(LineChart, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-panel\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ExchangeList\",\n            children: /*#__PURE__*/_jsxDEV(ExchangeList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 444,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"E1Ux8zcXvMOtUaHIghFJ6wztvY8=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"CurrencyInput\");\n$RefreshReg$(_c3, \"LineChart\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","Line","jsxDEV","_jsxDEV","CurrencyContext","currencyInfo","USD","name","flag","EUR","GBP","JPY","CNY","Header","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CurrencyInput","_ref","_s","_currencyInfo$selecte","_currencyInfo$selecte2","value","onChange","currencies","selectedCurrency","inputValue","setInputValue","suggestions","setSuggestions","handleInputChange","e","target","matches","filter","currency","toLowerCase","includes","handleSelect","className","placeholder","length","map","_currencyInfo$currenc","_currencyInfo$currenc2","onClick","_c2","LineChart","_ref2","_s2","fromCurrency","toCurrency","chartData","setChartData","fetchHistoricalData","endDate","Date","startDate","setDate","getDate","response","fetch","data","json","labels","dates","datasets","label","rates","fill","borderColor","tension","_c3","App","_s3","setSelectedCurrency","Provider","Converter","ExchangeList","_c4","$RefreshReg$"],"sources":["E:/Mini-project/src/App.js"],"sourcesContent":["// import { useState, useEffect, createContext, useContext } from 'react';\n// import './styles.css';\n\n// // 创建 Currency Context\n// const CurrencyContext = createContext();\n\n// function Header() {\n//   return <header><h1>ExchangeRate</h1></header>;\n// }\n\n// // 货币选择组件\n// function CurrencySelect({ value, onChange, currencies }) {\n//   return (\n//     <select \n//       className='CurrencySelect' \n//       value={value} \n//       onChange={onChange}\n//     >\n//       {currencies.map((currency) => (\n//         <option key={currency} value={currency}>\n//           {currency}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n\n// // 输入组件\n// function UserInput({ value, onChange, readOnly = false, type = \"text\" }) {\n//   return (\n//     <label>\n//       <input \n//         className='CurrencyName'\n//         value={value}\n//         onChange={onChange}\n//         readOnly={readOnly}\n//         type={type}\n//       />\n//     </label>\n//   );\n// }\n\n// // 交换按钮组件\n// function ExchangeButton({ onClick }) {\n//   return (\n//     <button className='ExchangeButton' onClick={onClick}>\n//       <img src=\"https://gd-hbimg.huaban.com/936d8460afb48f0c0737186352ba325e0a7f7dc4641e-oRIMdv_fw658\" alt=\"exchange\"/>\n//     </button>\n//   );\n// }\n\n// // 加载指示器组件\n// function LoadingSpinner() {\n//   return <div className=\"loading-spinner\"></div>;\n// }\n\n// // 错误消息组件\n// function ErrorMessage({ message }) {\n//   return <div className=\"error-message\">{message}</div>;\n// }\n\n// function Converter() {\n//   const { selectedCurrency, setSelectedCurrency } = useContext(CurrencyContext);\n//   const [fromCurrency, setFromCurrency] = useState(selectedCurrency);\n//   const [toCurrency, setToCurrency] = useState(\"EUR\");\n//   const [amount, setAmount] = useState(\"1\");\n//   const [result, setResult] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [lastUpdate, setLastUpdate] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n//   const [currencies, setCurrencies] = useState([]);\n//   const [historicalRate, setHistoricalRate] = useState(null);\n\n//   // 当fromCurrency改变时更新Context\n//   useEffect(() => {\n//     setSelectedCurrency(fromCurrency);\n//   }, [fromCurrency, setSelectedCurrency]);\n\n//   // 获取可用货币列表\n//   useEffect(() => {\n//     const fetchCurrencies = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`\n//         );\n//         const data = await response.json();\n//         if (data.result === \"success\") {\n//           setCurrencies(Object.keys(data.conversion_rates));\n//         }\n//       } catch (error) {\n//         setError(\"Failed to load currencies\");\n//       }\n//     };\n//     fetchCurrencies();\n//   }, []);\n\n//   // 获取当前汇率\n//   const fetchExchangeRate = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`\n//       );\n//       const data = await response.json();\n      \n//       if (data.result === \"success\") {\n//         const rate = data.conversion_rates[toCurrency];\n//         const calculatedResult = (parseFloat(amount) * rate).toFixed(2);\n//         setResult(calculatedResult);\n        \n//         const updateDate = new Date(data.time_last_update_unix * 1000);\n//         setLastUpdate(updateDate.toLocaleDateString());\n//       } else {\n//         setError(\"Failed to get exchange rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching exchange rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 获取历史汇率\n//   const fetchHistoricalRate = async (selectedDate) => {\n//     if (!selectedDate) return;\n    \n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${fromCurrency}/${formattedDate}`\n//       );\n//       const data = await response.json();\n      \n//       if (data.result === \"success\") {\n//         const historicalRate = data.conversion_rates[toCurrency];\n//         setHistoricalRate(historicalRate);\n//       } else {\n//         setError(\"Failed to get historical rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching historical rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 当输入值改变时自动获取新的汇率\n//   useEffect(() => {\n//     if (amount && fromCurrency && toCurrency) {\n//       fetchExchangeRate();\n//     }\n//   }, [amount, fromCurrency, toCurrency]);\n\n//   // 处理金额输入变化\n//   const handleAmountChange = (e) => {\n//     const value = e.target.value;\n//     if (/^\\d*\\.?\\d*$/.test(value)) {\n//       setAmount(value);\n//     }\n//   };\n\n//   // 处理日期输入变化\n//   const handleDateChange = (e) => {\n//     const selectedDate = e.target.value;\n//     setDate(selectedDate);\n//     fetchHistoricalRate(selectedDate);\n//   };\n\n//   // 交换货币\n//   const handleExchange = () => {\n//     setFromCurrency(toCurrency);\n//     setToCurrency(fromCurrency);\n//   };\n\n//   return (\n//     <>\n//       <div className='Convertertitle'><h1>Converter</h1></div>\n//       {error && <ErrorMessage message={error} />}\n//       <div className='ConverterBody'>\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={amount}\n//             onChange={handleAmountChange}\n//           />\n//           <CurrencySelect\n//             value={fromCurrency}\n//             onChange={(e) => setFromCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <ExchangeButton onClick={handleExchange} />\n\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={result}\n//             readOnly={true}\n//           />\n//           <CurrencySelect\n//             value={toCurrency}\n//             onChange={(e) => setToCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <div className='ExchangeResult'>\n//           {loading ? <LoadingSpinner /> : (\n//             result && `${amount} ${fromCurrency} = ${result} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='Data'>\n//           <UserInput \n//             type=\"date\"\n//             value={date}\n//             onChange={handleDateChange}\n//           />\n//         </div>\n\n//         <div className='HistoricalRate'>\n//           {historicalRate && (\n//             `Historical Rate (${date}): 1 ${fromCurrency} = ${historicalRate} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='LastUpdateData'>\n//           {lastUpdate && `Last updated: ${lastUpdate}`}\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// function LineChart() {\n//   return <h1>LineChart</h1>;\n// }\n\n// function ExchangeList() {\n//   const { selectedCurrency } = useContext(CurrencyContext);\n//   const [rates, setRates] = useState({});\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n  \n//   // 常用货币列表\n//   const commonCurrencies = [\"EUR\", \"CNY\", \"USD\", \"JPY\", \"CHF\", \"GBP\"].filter(\n//     currency => currency !== selectedCurrency\n//   );\n\n//   useEffect(() => {\n//     const fetchRates = async () => {\n//       setLoading(true);\n//       setError(\"\");\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${selectedCurrency}`\n//         );\n//         const data = await response.json();\n        \n//         if (data.result === \"success\") {\n//           setRates(data.conversion_rates);\n//         } else {\n//           setError(\"Failed to fetch exchange rates\");\n//         }\n//       } catch (error) {\n//         setError(\"Error loading exchange rates\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (selectedCurrency) {\n//       fetchRates();\n//     }\n//   }, [selectedCurrency]);\n\n//   if (loading) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"loading-spinner\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"error-message\">{error}</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"exchange-list\">\n//       <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//       <div className=\"rates-grid\">\n//         {commonCurrencies.map((currency) => (\n//           <div key={currency} className=\"rate-card\">\n//             <div className=\"currency-code\">{currency}</div>\n//             <div className=\"rate-value\">\n//               1 {selectedCurrency} = {rates[currency]?.toFixed(4)} {currency}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// // 主应用组件\n// export default function App() {\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n\n//   return (\n//     <CurrencyContext.Provider value={{ selectedCurrency, setSelectedCurrency }}>\n//       <div className='Header'><Header/></div>\n//       <div className='Converter'><Converter/></div>\n//       <div className='LineChart'><LineChart/></div>\n//       <div className='ExchangeList'><ExchangeList/></div>\n//     </CurrencyContext.Provider>\n//   );\n// }\n\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './styles.css';\n\nconst CurrencyContext = createContext();\n\n// 货币数据，包含缩写、全名和国旗emoji\nconst currencyInfo = {\n  USD: { name: \"United States Dollar\", flag: \"🇺🇸\" },\n  EUR: { name: \"Euro\", flag: \"🇪🇺\" },\n  GBP: { name: \"British Pound\", flag: \"🇬🇧\" },\n  JPY: { name: \"Japanese Yen\", flag: \"🇯🇵\" },\n  CNY: { name: \"Chinese Yuan\", flag: \"🇨🇳\" },\n  // ... 其他货币\n};\n\nfunction Header() {\n  return <header><h1>ExchangeRate</h1></header>;\n}\n\n// 货币输入和选择组件\nfunction CurrencyInput({ value, onChange, currencies, selectedCurrency }) {\n  const [inputValue, setInputValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n    \n    // 过滤匹配的货币\n    const matches = currencies.filter(currency => \n      currency.toLowerCase().includes(value.toLowerCase())\n    );\n    setSuggestions(matches);\n  };\n\n  const handleSelect = (currency) => {\n    setInputValue('');\n    onChange(currency);\n    setSuggestions([]);\n  };\n\n  return (\n    <div className=\"currency-input-container\">\n      <input\n        className=\"currency-search\"\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder=\"Search currency...\"\n      />\n      {suggestions.length > 0 && (\n        <div className=\"currency-suggestions\">\n          {suggestions.map(currency => (\n            <div\n              key={currency}\n              className=\"currency-suggestion-item\"\n              onClick={() => handleSelect(currency)}\n            >\n              {currencyInfo[currency]?.flag} {currency} - {currencyInfo[currency]?.name}\n            </div>\n          ))}\n        </div>\n      )}\n      <div className=\"selected-currency\">\n        {currencyInfo[selectedCurrency]?.flag} {selectedCurrency} - {currencyInfo[selectedCurrency]?.name}\n      </div>\n    </div>\n  );\n}\n\n// 其他组件保持不变...\n\nfunction LineChart({ fromCurrency, toCurrency }) {\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    const fetchHistoricalData = async () => {\n      // 获取过去30天的数据\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 30);\n\n      // 这里需要根据您的API调整\n      const response = await fetch(`your_historical_data_endpoint`);\n      const data = await response.json();\n\n      setChartData({\n        labels: data.dates,\n        datasets: [{\n          label: `${fromCurrency} to ${toCurrency} Exchange Rate`,\n          data: data.rates,\n          fill: false,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      });\n    };\n\n    if (fromCurrency && toCurrency) {\n      fetchHistoricalData();\n    }\n  }, [fromCurrency, toCurrency]);\n\n  return (\n    <div className=\"line-chart-container\">\n      <h2>Exchange Rate Trend</h2>\n      {chartData && <Line data={chartData} />}\n    </div>\n  );\n}\n\nfunction App() {\n  const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n\n  return (\n    <CurrencyContext.Provider value={{ selectedCurrency, setSelectedCurrency }}>\n      <div className=\"app-container\">\n        <div className=\"Header\"><Header/></div>\n        <div className=\"main-content\">\n          <div className=\"left-panel\">\n            <div className=\"Converter\"><Converter/></div>\n            <div className=\"LineChart\"><LineChart/></div>\n          </div>\n          <div className=\"right-panel\">\n            <div className=\"ExchangeList\"><ExchangeList/></div>\n          </div>\n        </div>\n      </div>\n    </CurrencyContext.Provider>\n  );\n}\n\nexport default App;"],"mappings":";;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}