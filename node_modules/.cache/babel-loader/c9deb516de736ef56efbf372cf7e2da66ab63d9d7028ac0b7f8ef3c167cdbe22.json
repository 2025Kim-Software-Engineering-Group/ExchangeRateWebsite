{"ast":null,"code":"var _jsxFileName = \"E:\\\\Mini-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect, createContext, useContext } from 'react';\n// import './styles.css';\n\n// // 创建 Currency Context\n// const CurrencyContext = createContext();\n\n// function Header() {\n//   return <header><h1>ExchangeRate</h1></header>;\n// }\n\n// // 货币选择组件\n// function CurrencySelect({ value, onChange, currencies }) {\n//   return (\n//     <select \n//       className='CurrencySelect' \n//       value={value} \n//       onChange={onChange}\n//     >\n//       {currencies.map((currency) => (\n//         <option key={currency} value={currency}>\n//           {currency}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n\n// // 输入组件\n// function UserInput({ value, onChange, readOnly = false, type = \"text\" }) {\n//   return (\n//     <label>\n//       <input \n//         className='CurrencyName'\n//         value={value}\n//         onChange={onChange}\n//         readOnly={readOnly}\n//         type={type}\n//       />\n//     </label>\n//   );\n// }\n\n// // 交换按钮组件\n// function ExchangeButton({ onClick }) {\n//   return (\n//     <button className='ExchangeButton' onClick={onClick}>\n//       <img src=\"https://gd-hbimg.huaban.com/936d8460afb48f0c0737186352ba325e0a7f7dc4641e-oRIMdv_fw658\" alt=\"exchange\"/>\n//     </button>\n//   );\n// }\n\n// // 加载指示器组件\n// function LoadingSpinner() {\n//   return <div className=\"loading-spinner\"></div>;\n// }\n\n// // 错误消息组件\n// function ErrorMessage({ message }) {\n//   return <div className=\"error-message\">{message}</div>;\n// }\n\n// function Converter() {\n//   const { selectedCurrency, setSelectedCurrency } = useContext(CurrencyContext);\n//   const [fromCurrency, setFromCurrency] = useState(selectedCurrency);\n//   const [toCurrency, setToCurrency] = useState(\"EUR\");\n//   const [amount, setAmount] = useState(\"1\");\n//   const [result, setResult] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [lastUpdate, setLastUpdate] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n//   const [currencies, setCurrencies] = useState([]);\n//   const [historicalRate, setHistoricalRate] = useState(null);\n\n//   // 当fromCurrency改变时更新Context\n//   useEffect(() => {\n//     setSelectedCurrency(fromCurrency);\n//   }, [fromCurrency, setSelectedCurrency]);\n\n//   // 获取可用货币列表\n//   useEffect(() => {\n//     const fetchCurrencies = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`\n//         );\n//         const data = await response.json();\n//         if (data.result === \"success\") {\n//           setCurrencies(Object.keys(data.conversion_rates));\n//         }\n//       } catch (error) {\n//         setError(\"Failed to load currencies\");\n//       }\n//     };\n//     fetchCurrencies();\n//   }, []);\n\n//   // 获取当前汇率\n//   const fetchExchangeRate = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`\n//       );\n//       const data = await response.json();\n\n//       if (data.result === \"success\") {\n//         const rate = data.conversion_rates[toCurrency];\n//         const calculatedResult = (parseFloat(amount) * rate).toFixed(2);\n//         setResult(calculatedResult);\n\n//         const updateDate = new Date(data.time_last_update_unix * 1000);\n//         setLastUpdate(updateDate.toLocaleDateString());\n//       } else {\n//         setError(\"Failed to get exchange rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching exchange rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 获取历史汇率\n//   const fetchHistoricalRate = async (selectedDate) => {\n//     if (!selectedDate) return;\n\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${fromCurrency}/${formattedDate}`\n//       );\n//       const data = await response.json();\n\n//       if (data.result === \"success\") {\n//         const historicalRate = data.conversion_rates[toCurrency];\n//         setHistoricalRate(historicalRate);\n//       } else {\n//         setError(\"Failed to get historical rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching historical rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 当输入值改变时自动获取新的汇率\n//   useEffect(() => {\n//     if (amount && fromCurrency && toCurrency) {\n//       fetchExchangeRate();\n//     }\n//   }, [amount, fromCurrency, toCurrency]);\n\n//   // 处理金额输入变化\n//   const handleAmountChange = (e) => {\n//     const value = e.target.value;\n//     if (/^\\d*\\.?\\d*$/.test(value)) {\n//       setAmount(value);\n//     }\n//   };\n\n//   // 处理日期输入变化\n//   const handleDateChange = (e) => {\n//     const selectedDate = e.target.value;\n//     setDate(selectedDate);\n//     fetchHistoricalRate(selectedDate);\n//   };\n\n//   // 交换货币\n//   const handleExchange = () => {\n//     setFromCurrency(toCurrency);\n//     setToCurrency(fromCurrency);\n//   };\n\n//   return (\n//     <>\n//       <div className='Convertertitle'><h1>Converter</h1></div>\n//       {error && <ErrorMessage message={error} />}\n//       <div className='ConverterBody'>\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={amount}\n//             onChange={handleAmountChange}\n//           />\n//           <CurrencySelect\n//             value={fromCurrency}\n//             onChange={(e) => setFromCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <ExchangeButton onClick={handleExchange} />\n\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={result}\n//             readOnly={true}\n//           />\n//           <CurrencySelect\n//             value={toCurrency}\n//             onChange={(e) => setToCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <div className='ExchangeResult'>\n//           {loading ? <LoadingSpinner /> : (\n//             result && `${amount} ${fromCurrency} = ${result} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='Data'>\n//           <UserInput \n//             type=\"date\"\n//             value={date}\n//             onChange={handleDateChange}\n//           />\n//         </div>\n\n//         <div className='HistoricalRate'>\n//           {historicalRate && (\n//             `Historical Rate (${date}): 1 ${fromCurrency} = ${historicalRate} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='LastUpdateData'>\n//           {lastUpdate && `Last updated: ${lastUpdate}`}\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// function LineChart() {\n//   return <h1>LineChart</h1>;\n// }\n\n// function ExchangeList() {\n//   const { selectedCurrency } = useContext(CurrencyContext);\n//   const [rates, setRates] = useState({});\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n\n//   // 常用货币列表\n//   const commonCurrencies = [\"EUR\", \"CNY\", \"USD\", \"JPY\", \"CHF\", \"GBP\"].filter(\n//     currency => currency !== selectedCurrency\n//   );\n\n//   useEffect(() => {\n//     const fetchRates = async () => {\n//       setLoading(true);\n//       setError(\"\");\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${selectedCurrency}`\n//         );\n//         const data = await response.json();\n\n//         if (data.result === \"success\") {\n//           setRates(data.conversion_rates);\n//         } else {\n//           setError(\"Failed to fetch exchange rates\");\n//         }\n//       } catch (error) {\n//         setError(\"Error loading exchange rates\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (selectedCurrency) {\n//       fetchRates();\n//     }\n//   }, [selectedCurrency]);\n\n//   if (loading) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"loading-spinner\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"error-message\">{error}</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"exchange-list\">\n//       <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//       <div className=\"rates-grid\">\n//         {commonCurrencies.map((currency) => (\n//           <div key={currency} className=\"rate-card\">\n//             <div className=\"currency-code\">{currency}</div>\n//             <div className=\"rate-value\">\n//               1 {selectedCurrency} = {rates[currency]?.toFixed(4)} {currency}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// // 主应用组件\n// export default function App() {\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n\n//   return (\n//     <CurrencyContext.Provider value={{ selectedCurrency, setSelectedCurrency }}>\n//       <div className='Header'><Header/></div>\n//       <div className='Converter'><Converter/></div>\n//       <div className='LineChart'><LineChart/></div>\n//       <div className='ExchangeList'><ExchangeList/></div>\n//     </CurrencyContext.Provider>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CURRENCY_FLAGS = {\n  USD: \"🇺🇸\",\n  GBP: \"🇬🇧\",\n  EUR: \"🇪🇺\",\n  CNY: \"🇨🇳\",\n  CAD: \"🇨🇦\",\n  JPY: \"🇯🇵\"\n};\nconst CURRENCY_NAMES = {\n  USD: \"United States Dollar\",\n  GBP: \"British Pound Sterling\",\n  EUR: \"Euro\",\n  CNY: \"Chinese Yuan\",\n  CAD: \"Canadian Dollar\",\n  JPY: \"Japanese Yen\"\n};\nfunction App() {\n  _s();\n  const [rates, setRates] = useState({});\n  const [fromCurrency, setFromCurrency] = useState(\"USD\");\n  const [toCurrency, setToCurrency] = useState(\"EUR\");\n  const [amount, setAmount] = useState(1);\n  const [searchFrom, setSearchFrom] = useState(\"\");\n  const [searchTo, setSearchTo] = useState(\"\");\n  const [historicalData, setHistoricalData] = useState([]);\n  useEffect(() => {\n    fetchRates();\n    generateMockHistoricalData();\n  }, []);\n  const fetchRates = async () => {\n    try {\n      const response = await fetch('https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD');\n      const data = await response.json();\n      setRates(data.conversion_rates);\n    } catch (error) {\n      console.error('Error fetching rates:', error);\n    }\n  };\n  const generateMockHistoricalData = () => {\n    const data = [];\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      data.push({\n        date: date.toISOString().split('T')[0],\n        rate: 1 + Math.random() * 0.2\n      });\n    }\n    setHistoricalData(data);\n  };\n  const convertCurrency = () => {\n    if (!rates[fromCurrency] || !rates[toCurrency]) return 0;\n    const rate = rates[toCurrency] / rates[fromCurrency];\n    return (amount * rate).toFixed(6);\n  };\n  const filterCurrencies = search => {\n    if (!search) return [];\n    return Object.keys(CURRENCY_NAMES).filter(code => code.toLowerCase().includes(search.toLowerCase()) || CURRENCY_NAMES[code].toLowerCase().includes(search.toLowerCase()));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Exchange Rate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"converter-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Converter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"currency-inputs\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"currency-input\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: amount,\n                onChange: e => setAmount(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"currency-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: searchFrom,\n                  onChange: e => setSearchFrom(e.target.value),\n                  placeholder: \"From Currency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 19\n                }, this), searchFrom && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"dropdown\",\n                  children: filterCurrencies(searchFrom).map(code => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"dropdown-item\",\n                    onClick: () => {\n                      setFromCurrency(code);\n                      setSearchFrom(\"\");\n                    },\n                    children: [CURRENCY_FLAGS[code], \" \", code, \" - \", CURRENCY_NAMES[code]]\n                  }, code, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"currency-input\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: convertCurrency(),\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"currency-select\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: searchTo,\n                  onChange: e => setSearchTo(e.target.value),\n                  placeholder: \"To Currency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 19\n                }, this), searchTo && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"dropdown\",\n                  children: filterCurrencies(searchTo).map(code => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"dropdown-item\",\n                    onClick: () => {\n                      setToCurrency(code);\n                      setSearchTo(\"\");\n                    },\n                    children: [CURRENCY_FLAGS[code], \" \", code, \" - \", CURRENCY_NAMES[code]]\n                  }, code, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Exchange Rate History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              viewBox: \"0 0 800 400\",\n              children: historicalData.map((point, index) => {\n                const x = index / (historicalData.length - 1) * 760 + 20;\n                const y = 380 - (point.rate - 1) * 1000;\n                return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [index > 0 && /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: (index - 1) / (historicalData.length - 1) * 760 + 20,\n                    y1: 380 - (historicalData[index - 1].rate - 1) * 1000,\n                    x2: x,\n                    y2: y,\n                    stroke: \"#007bff\",\n                    strokeWidth: \"2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 487,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n                    cx: x,\n                    cy: y,\n                    r: \"4\",\n                    fill: \"#007bff\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 496,\n                    columnNumber: 23\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"watchlist-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Exchange Rate Watchlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), [\"GBP\", \"EUR\", \"CNY\", \"CAD\", \"JPY\"].map(currency => {\n          var _rates$currency;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"watchlist-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [CURRENCY_FLAGS[currency], \" \", currency]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: ((_rates$currency = rates[currency]) === null || _rates$currency === void 0 ? void 0 : _rates$currency.toFixed(4)) || \"N/A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 15\n            }, this)]\n          }, currency, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 403,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EQot0SVL0bLncjFmgMM+XJXHpxw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CURRENCY_FLAGS","USD","GBP","EUR","CNY","CAD","JPY","CURRENCY_NAMES","App","_s","rates","setRates","fromCurrency","setFromCurrency","toCurrency","setToCurrency","amount","setAmount","searchFrom","setSearchFrom","searchTo","setSearchTo","historicalData","setHistoricalData","fetchRates","generateMockHistoricalData","response","fetch","data","json","conversion_rates","error","console","today","Date","i","date","setDate","getDate","push","toISOString","split","rate","Math","random","convertCurrency","toFixed","filterCurrencies","search","Object","keys","filter","code","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","map","onClick","readOnly","viewBox","point","index","x","length","y","Fragment","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","r","fill","currency","_rates$currency","_c","$RefreshReg$"],"sources":["E:/Mini-project/src/App.js"],"sourcesContent":["// import { useState, useEffect, createContext, useContext } from 'react';\n// import './styles.css';\n\n// // 创建 Currency Context\n// const CurrencyContext = createContext();\n\n// function Header() {\n//   return <header><h1>ExchangeRate</h1></header>;\n// }\n\n// // 货币选择组件\n// function CurrencySelect({ value, onChange, currencies }) {\n//   return (\n//     <select \n//       className='CurrencySelect' \n//       value={value} \n//       onChange={onChange}\n//     >\n//       {currencies.map((currency) => (\n//         <option key={currency} value={currency}>\n//           {currency}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n\n// // 输入组件\n// function UserInput({ value, onChange, readOnly = false, type = \"text\" }) {\n//   return (\n//     <label>\n//       <input \n//         className='CurrencyName'\n//         value={value}\n//         onChange={onChange}\n//         readOnly={readOnly}\n//         type={type}\n//       />\n//     </label>\n//   );\n// }\n\n// // 交换按钮组件\n// function ExchangeButton({ onClick }) {\n//   return (\n//     <button className='ExchangeButton' onClick={onClick}>\n//       <img src=\"https://gd-hbimg.huaban.com/936d8460afb48f0c0737186352ba325e0a7f7dc4641e-oRIMdv_fw658\" alt=\"exchange\"/>\n//     </button>\n//   );\n// }\n\n// // 加载指示器组件\n// function LoadingSpinner() {\n//   return <div className=\"loading-spinner\"></div>;\n// }\n\n// // 错误消息组件\n// function ErrorMessage({ message }) {\n//   return <div className=\"error-message\">{message}</div>;\n// }\n\n// function Converter() {\n//   const { selectedCurrency, setSelectedCurrency } = useContext(CurrencyContext);\n//   const [fromCurrency, setFromCurrency] = useState(selectedCurrency);\n//   const [toCurrency, setToCurrency] = useState(\"EUR\");\n//   const [amount, setAmount] = useState(\"1\");\n//   const [result, setResult] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [lastUpdate, setLastUpdate] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n//   const [currencies, setCurrencies] = useState([]);\n//   const [historicalRate, setHistoricalRate] = useState(null);\n\n//   // 当fromCurrency改变时更新Context\n//   useEffect(() => {\n//     setSelectedCurrency(fromCurrency);\n//   }, [fromCurrency, setSelectedCurrency]);\n\n//   // 获取可用货币列表\n//   useEffect(() => {\n//     const fetchCurrencies = async () => {\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD`\n//         );\n//         const data = await response.json();\n//         if (data.result === \"success\") {\n//           setCurrencies(Object.keys(data.conversion_rates));\n//         }\n//       } catch (error) {\n//         setError(\"Failed to load currencies\");\n//       }\n//     };\n//     fetchCurrencies();\n//   }, []);\n\n//   // 获取当前汇率\n//   const fetchExchangeRate = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${fromCurrency}`\n//       );\n//       const data = await response.json();\n      \n//       if (data.result === \"success\") {\n//         const rate = data.conversion_rates[toCurrency];\n//         const calculatedResult = (parseFloat(amount) * rate).toFixed(2);\n//         setResult(calculatedResult);\n        \n//         const updateDate = new Date(data.time_last_update_unix * 1000);\n//         setLastUpdate(updateDate.toLocaleDateString());\n//       } else {\n//         setError(\"Failed to get exchange rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching exchange rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 获取历史汇率\n//   const fetchHistoricalRate = async (selectedDate) => {\n//     if (!selectedDate) return;\n    \n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\n//       const response = await fetch(\n//         `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/history/${fromCurrency}/${formattedDate}`\n//       );\n//       const data = await response.json();\n      \n//       if (data.result === \"success\") {\n//         const historicalRate = data.conversion_rates[toCurrency];\n//         setHistoricalRate(historicalRate);\n//       } else {\n//         setError(\"Failed to get historical rate\");\n//       }\n//     } catch (error) {\n//       setError(\"Error fetching historical rate\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 当输入值改变时自动获取新的汇率\n//   useEffect(() => {\n//     if (amount && fromCurrency && toCurrency) {\n//       fetchExchangeRate();\n//     }\n//   }, [amount, fromCurrency, toCurrency]);\n\n//   // 处理金额输入变化\n//   const handleAmountChange = (e) => {\n//     const value = e.target.value;\n//     if (/^\\d*\\.?\\d*$/.test(value)) {\n//       setAmount(value);\n//     }\n//   };\n\n//   // 处理日期输入变化\n//   const handleDateChange = (e) => {\n//     const selectedDate = e.target.value;\n//     setDate(selectedDate);\n//     fetchHistoricalRate(selectedDate);\n//   };\n\n//   // 交换货币\n//   const handleExchange = () => {\n//     setFromCurrency(toCurrency);\n//     setToCurrency(fromCurrency);\n//   };\n\n//   return (\n//     <>\n//       <div className='Convertertitle'><h1>Converter</h1></div>\n//       {error && <ErrorMessage message={error} />}\n//       <div className='ConverterBody'>\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={amount}\n//             onChange={handleAmountChange}\n//           />\n//           <CurrencySelect\n//             value={fromCurrency}\n//             onChange={(e) => setFromCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <ExchangeButton onClick={handleExchange} />\n\n//         <div className=\"input-group\">\n//           <UserInput \n//             value={result}\n//             readOnly={true}\n//           />\n//           <CurrencySelect\n//             value={toCurrency}\n//             onChange={(e) => setToCurrency(e.target.value)}\n//             currencies={currencies}\n//           />\n//         </div>\n\n//         <div className='ExchangeResult'>\n//           {loading ? <LoadingSpinner /> : (\n//             result && `${amount} ${fromCurrency} = ${result} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='Data'>\n//           <UserInput \n//             type=\"date\"\n//             value={date}\n//             onChange={handleDateChange}\n//           />\n//         </div>\n\n//         <div className='HistoricalRate'>\n//           {historicalRate && (\n//             `Historical Rate (${date}): 1 ${fromCurrency} = ${historicalRate} ${toCurrency}`\n//           )}\n//         </div>\n\n//         <div className='LastUpdateData'>\n//           {lastUpdate && `Last updated: ${lastUpdate}`}\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// function LineChart() {\n//   return <h1>LineChart</h1>;\n// }\n\n// function ExchangeList() {\n//   const { selectedCurrency } = useContext(CurrencyContext);\n//   const [rates, setRates] = useState({});\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\");\n  \n//   // 常用货币列表\n//   const commonCurrencies = [\"EUR\", \"CNY\", \"USD\", \"JPY\", \"CHF\", \"GBP\"].filter(\n//     currency => currency !== selectedCurrency\n//   );\n\n//   useEffect(() => {\n//     const fetchRates = async () => {\n//       setLoading(true);\n//       setError(\"\");\n//       try {\n//         const response = await fetch(\n//           `https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/${selectedCurrency}`\n//         );\n//         const data = await response.json();\n        \n//         if (data.result === \"success\") {\n//           setRates(data.conversion_rates);\n//         } else {\n//           setError(\"Failed to fetch exchange rates\");\n//         }\n//       } catch (error) {\n//         setError(\"Error loading exchange rates\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (selectedCurrency) {\n//       fetchRates();\n//     }\n//   }, [selectedCurrency]);\n\n//   if (loading) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"loading-spinner\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"exchange-list\">\n//         <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//         <div className=\"error-message\">{error}</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"exchange-list\">\n//       <h2>Common Exchange Rates for {selectedCurrency}</h2>\n//       <div className=\"rates-grid\">\n//         {commonCurrencies.map((currency) => (\n//           <div key={currency} className=\"rate-card\">\n//             <div className=\"currency-code\">{currency}</div>\n//             <div className=\"rate-value\">\n//               1 {selectedCurrency} = {rates[currency]?.toFixed(4)} {currency}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// // 主应用组件\n// export default function App() {\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n\n//   return (\n//     <CurrencyContext.Provider value={{ selectedCurrency, setSelectedCurrency }}>\n//       <div className='Header'><Header/></div>\n//       <div className='Converter'><Converter/></div>\n//       <div className='LineChart'><LineChart/></div>\n//       <div className='ExchangeList'><ExchangeList/></div>\n//     </CurrencyContext.Provider>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst CURRENCY_FLAGS = {\n  USD: \"🇺🇸\",\n  GBP: \"🇬🇧\",\n  EUR: \"🇪🇺\",\n  CNY: \"🇨🇳\",\n  CAD: \"🇨🇦\",\n  JPY: \"🇯🇵\",\n};\n\nconst CURRENCY_NAMES = {\n  USD: \"United States Dollar\",\n  GBP: \"British Pound Sterling\",\n  EUR: \"Euro\",\n  CNY: \"Chinese Yuan\",\n  CAD: \"Canadian Dollar\",\n  JPY: \"Japanese Yen\",\n};\n\nfunction App() {\n  const [rates, setRates] = useState({});\n  const [fromCurrency, setFromCurrency] = useState(\"USD\");\n  const [toCurrency, setToCurrency] = useState(\"EUR\");\n  const [amount, setAmount] = useState(1);\n  const [searchFrom, setSearchFrom] = useState(\"\");\n  const [searchTo, setSearchTo] = useState(\"\");\n  const [historicalData, setHistoricalData] = useState([]);\n\n  useEffect(() => {\n    fetchRates();\n    generateMockHistoricalData();\n  }, []);\n\n  const fetchRates = async () => {\n    try {\n      const response = await fetch('https://v6.exchangerate-api.com/v6/dd875ed8009b2e791ff987e6/latest/USD');\n      const data = await response.json();\n      setRates(data.conversion_rates);\n    } catch (error) {\n      console.error('Error fetching rates:', error);\n    }\n  };\n\n  const generateMockHistoricalData = () => {\n    const data = [];\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      data.push({\n        date: date.toISOString().split('T')[0],\n        rate: 1 + Math.random() * 0.2,\n      });\n    }\n    setHistoricalData(data);\n  };\n\n  const convertCurrency = () => {\n    if (!rates[fromCurrency] || !rates[toCurrency]) return 0;\n    const rate = rates[toCurrency] / rates[fromCurrency];\n    return (amount * rate).toFixed(6);\n  };\n\n  const filterCurrencies = (search) => {\n    if (!search) return [];\n    return Object.keys(CURRENCY_NAMES).filter(code =>\n      code.toLowerCase().includes(search.toLowerCase()) ||\n      CURRENCY_NAMES[code].toLowerCase().includes(search.toLowerCase())\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Exchange Rate</h1>\n      \n      <div className=\"main-container\">\n        <div className=\"left-panel\">\n          <div className=\"converter-container\">\n            <h2>Converter</h2>\n            <div className=\"currency-inputs\">\n              <div className=\"currency-input\">\n                <input\n                  type=\"number\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                />\n                <div className=\"currency-select\">\n                  <input\n                    type=\"text\"\n                    value={searchFrom}\n                    onChange={(e) => setSearchFrom(e.target.value)}\n                    placeholder=\"From Currency\"\n                  />\n                  {searchFrom && (\n                    <div className=\"dropdown\">\n                      {filterCurrencies(searchFrom).map(code => (\n                        <div\n                          key={code}\n                          className=\"dropdown-item\"\n                          onClick={() => {\n                            setFromCurrency(code);\n                            setSearchFrom(\"\");\n                          }}\n                        >\n                          {CURRENCY_FLAGS[code]} {code} - {CURRENCY_NAMES[code]}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"currency-input\">\n                <input\n                  type=\"text\"\n                  value={convertCurrency()}\n                  readOnly\n                />\n                <div className=\"currency-select\">\n                  <input\n                    type=\"text\"\n                    value={searchTo}\n                    onChange={(e) => setSearchTo(e.target.value)}\n                    placeholder=\"To Currency\"\n                  />\n                  {searchTo && (\n                    <div className=\"dropdown\">\n                      {filterCurrencies(searchTo).map(code => (\n                        <div\n                          key={code}\n                          className=\"dropdown-item\"\n                          onClick={() => {\n                            setToCurrency(code);\n                            setSearchTo(\"\");\n                          }}\n                        >\n                          {CURRENCY_FLAGS[code]} {code} - {CURRENCY_NAMES[code]}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"chart-container\">\n            <h2>Exchange Rate History</h2>\n            <div className=\"chart\">\n              <svg viewBox=\"0 0 800 400\">\n                {historicalData.map((point, index) => {\n                  const x = (index / (historicalData.length - 1)) * 760 + 20;\n                  const y = 380 - (point.rate - 1) * 1000;\n                  return (\n                    <React.Fragment key={index}>\n                      {index > 0 && (\n                        <line\n                          x1={(((index - 1) / (historicalData.length - 1)) * 760) + 20}\n                          y1={380 - (historicalData[index - 1].rate - 1) * 1000}\n                          x2={x}\n                          y2={y}\n                          stroke=\"#007bff\"\n                          strokeWidth=\"2\"\n                        />\n                      )}\n                      <circle\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill=\"#007bff\"\n                      />\n                    </React.Fragment>\n                  );\n                })}\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"watchlist-container\">\n          <h2>Exchange Rate Watchlist</h2>\n          {[\"GBP\", \"EUR\", \"CNY\", \"CAD\", \"JPY\"].map(currency => (\n            <div key={currency} className=\"watchlist-item\">\n              <span>{CURRENCY_FLAGS[currency]} {currency}</span>\n              <span>{rates[currency]?.toFixed(4) || \"N/A\"}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}